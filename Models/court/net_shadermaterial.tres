[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Models/court/Net.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_diffuse(vec4 color, float roughness, out vec3 albedo,
        out float specular_out, out float oren_nayar_roughness_out) {
    albedo = color.rgb;
    specular_out = 0.5;
    oren_nayar_roughness_out = roughness;
}


void node_bsdf_transparent(vec4 color, out float alpha) {
    alpha = clamp(1.0 - dot(color.rgb, vec3(1.0)), 0.0, 1.0);
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Transparent BSDF'
	// type: 'ShaderNodeBsdfTransparent'
	// input sockets handling
	vec4 node0_in0_color = vec4(1.0, 1.0, 1.0, 1.0);
	// output sockets definitions
	float node0_bsdf_out0_alpha;
	
	node_bsdf_transparent(node0_in0_color, node0_bsdf_out0_alpha);
	
	
	// node: 'Texture Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node1_out0_uv;
	
	node1_out0_uv = vec3(UV, 0.0);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_uv;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Diffuse BSDF'
	// type: 'ShaderNodeBsdfDiffuse'
	// input sockets handling
	vec4 node3_in0_color = node2_out0_color;
	float node3_in1_roughness = float(0.0);
	vec3 node3_in2_normal = NORMAL;
	// output sockets definitions
	vec3 node3_bsdf_out0_albedo;
	float node3_bsdf_out1_specular;
	float node3_bsdf_out2_oren_nayar_roughness;
	
	node_bsdf_diffuse(node3_in0_color, node3_in1_roughness, node3_bsdf_out0_albedo,
		node3_bsdf_out1_specular, node3_bsdf_out2_oren_nayar_roughness);
	
	
	// node: 'Mix Shader'
	// type: 'ShaderNodeMixShader'
	// input sockets handling
	float node4_in0_fac = node2_out1_alpha;
	float node4_shader_in1_alpha = node0_bsdf_out0_alpha;
	vec3 node4_shader_in2_albedo = node3_bsdf_out0_albedo;
	float node4_shader_in3_specular = node3_bsdf_out1_specular;
	float node4_shader_in4_oren_nayar_roughness =
		node3_bsdf_out2_oren_nayar_roughness;
	vec3 node4_shader_in5_normal = node3_in2_normal;
	// output sockets definitions
	float node4_shader_out1_alpha;
	
	node4_shader_out1_alpha = mix(node4_shader_in1_alpha, 1.0, node4_in0_fac);
	
	
	ALBEDO = node4_shader_in2_albedo;
	SPECULAR = node4_shader_in3_specular;
	NORMAL = node4_shader_in5_normal;
	// uncomment it only when you set diffuse mode to oren nayar
	// ROUGHNESS = node4_shader_in4_oren_nayar_roughness;
	EMISSION += textureLod(SCREEN_TEXTURE, SCREEN_UV, ROUGHNESS).rgb * (1.0 -
		node4_shader_out1_alpha);
	ALBEDO *= node4_shader_out1_alpha;
	ALPHA = 1.0;
}
"

[resource]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )
